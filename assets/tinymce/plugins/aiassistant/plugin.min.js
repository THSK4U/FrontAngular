(function () {
  'use strict';

  const PluginManager = tinymce.util.Tools.resolve("tinymce.PluginManager");

  // Configuration
  const AI_CONFIG = {
    endpoint: "https://openrouter.ai/api/v1/chat/completions",
    modelName: "deepseek/deepseek-r1:free",
    token: window.aiToken, // Ensure this is set in your global scope
    siteUrl: "<YOUR_SITE_URL>", // Optional. Replace with your site URL.
    siteName: "<YOUR_SITE_NAME>", // Optional. Replace with your site name.
  };

  PluginManager.add('aiassistant', function (editor) {
    // Add button to toolbar
    editor.ui.registry.addButton('aiassistant', {
      text: 'AI',
      icon: 'preview',
      onAction: function () {
        openAIDialog();
      }
    });

    // Add menu item
    editor.ui.registry.addMenuItem('aiassistant', {
      text: 'GitHub AI Assistant',
      icon: 'preview',
      onAction: function () {
        openAIDialog();
      }
    });

    function openAIDialog() {
      const selectedText = editor.selection.getContent({ format: 'html' }); // Get selected content as HTML

      editor.windowManager.open({
        title: 'GitHub AI Assistant (France)',
        body: {
          type: 'panel',
          items: [
            {
              type: 'textarea',
              name: 'inputText',
              label: 'Input Text',
              placeholder: 'Enter your text here...',
              value: selectedText
            }
          ]
        },
        buttons: [
          {
            type: 'cancel',
            text: 'Stop'
          },
          {
            type: 'submit',
            text: 'Try again',
            primary: true
          }
        ],
        onSubmit: async function (api) {
          const data = api.getData();
          const inputText = data.inputText;

          // Close dialog and show loading state
          api.close();
          editor.setProgressState(true);

          try {
            const response = await processAIRequest(inputText);
            editor.setProgressState(false);

            // Show the AI response in a new dialog with options
            editor.windowManager.open({
              title: 'AI Response',
              body: {
                type: 'panel',
                items: [
                  {
                    type: 'textarea',
                    name: 'aiResponse',
                    label: 'AI Response',
                    value: response.content
                  }
                ]
              },
              buttons: [
                {
                  type: 'cancel',
                  text: 'Stop'
                },
                {
                  type: 'submit',
                  text: 'Try again',
                  primary: true
                },
                {
                  type: 'submit',
                  text: 'Insert',
                  primary: false
                }
              ],
              onSubmit: function (api) {
                const action = api.getData().submitButton;
                if (action === 'Insert') {
                  editor.insertContent(response.content);
                } else if (action === 'Try again') {
                  openAIDialog();
                }
                api.close();
              }
            });
          } catch (error) {
            editor.setProgressState(false);
            editor.notificationManager.open({
              text: error.message || 'Failed to process AI request',
              type: 'error',
              timeout: 5000
            });
          }
        }
      });
    }

    async function processAIRequest(inputText) {
      const prompt = [
        'Answer the question based on the context below. Ensure the content is tailored for France and written in French ',
        'The response should be in HTML format.',
        'The response should preserve any HTML formatting, links, and styles in the context.',
        'Focus only on information relevant to "d\'Ã©tudes thermiques" (thermal studies).',
        'Context:',
        inputText
      ].join('\n');

      try {
        const response = await fetch(AI_CONFIG.endpoint, {
          method: "POST",
          headers: {
            "Authorization": `Bearer ${AI_CONFIG.token}`,
            "HTTP-Referer": AI_CONFIG.siteUrl, // Optional. Site URL for rankings on openrouter.ai.
            "X-Title": AI_CONFIG.siteName, // Optional. Site title for rankings on openrouter.ai.
            "Content-Type": "application/json"
          },
          body: JSON.stringify({
            model: AI_CONFIG.modelName,
            messages: [
              {
                role: "user",
                content: prompt,
              },
            ],
          }),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error?.message || 'AI service request failed');
        }

        const data = await response.json();
        return {
          content: data.choices[0].message.content.trim(), // Treat the response as HTML
        };
      } catch (error) {
        throw new Error(`AI Assistant Error: ${error.message}`);
      }
    }

    // Return metadata for the plugin
    return {
      getMetadata: function () {
        return {
          name: 'GitHub AI Assistant (France)',
          url: 'https://your-domain.com/tinymce-ai-plugin'
        };
      }
    };
  });
})();
